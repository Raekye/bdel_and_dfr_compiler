def error(var code) {
	asm {
		%load 1 r0;
		%output r0;
		%die;
	};
}

def heap_get(var address) {
	asm {
		%load 1 r0;
		%unheap r0 r13;
	};
}

def heap_set(var address, var value) {
	asm {
		%load 1 r0;
		%load 2 r1;
		%heap r1 r0;
	};
	value;
}

def malloc(var n) {
	var i = asm {
		%literal 0 r0;
		%unheap r0 r13;
	};
	var ret = 0 - 1;
	while (i < 1024) {
		var x = heap_get(i);
		if (x == 0) {
			i = i + 2;
			var j = 0;
			var ok = 1;
			while (j < n) {
				if (heap_get(i + j) == 0) {
					0;
				} else {
					ok = 0;
					break;
				}
				j = j + 1;
			}
			if (ok == 1) {
				ret = i;
				break;
			} else {
				i = i + j;
			}
		} else {
			i = i + 1 + heap_get(i + 1);
		}
	}
	if (i > 1024 - 1) {
		error(1);
	}
	ret;
}

def free(var address) {
	var n = heap_get(address - 1);
	var i = address - 2;
	while (i < address + n) {
		heap_set(i, 0);
	}
}

def io_draw(var charcode, var x, var y) {
	asm {
		%load 1 r0;
		%load 2 r1;
		%load 3 r2;
		%draw r0 r1 r2;
	};
}

var io_x = 0;
var io_y = 0;

def io_clear() {
	var i = 0;
	while (i < 53) {
		var j = 0;
		while (j < 30) {
			asm {
				%load 2 r0;
				%load 1 r1;
				%literal " " r2;
				%draw r2 r0 r1;
			};
		}
	}
}

def io_normalize(var n) {
	if (io_x > 53 - n) {
		io_x = 0;
		io_y = io_y + 1;
	}
	if (io_y > 30 - 1) {
		io_clear();
		io_y = 0;
	}
}

def io_putchar(var ch) {
	io_normalize(1);
	var x = io_x;
	var y = io_y;
	asm {
		%load 3 r0;
		%load 2 r1;
		%load 1 r2;
		%draw r0 r1 r2;
	};
	io_x = io_x + 1;
}

def io_readchar() {
	io_normalize(1);
	var x = io_x;
	var y = io_y;
	var z = asm {
		%load 2 r0;
		%load 1 r1;
		%keyboard r0 r1 r13;
	};
	io_x = io_x + 1;
	z;
}

def io_puthex(var ch) {
	io_normalize(4);
	var x = io_x;
	var y = io_y;
	asm {
		%load 3 r0;
		%load 2 r1;
		%load 1 r0;
		%printhex r0 r1 r2;
	};
	io_x = io_x + 4;
}

def io_readhex() {
	io_normalize(4);
	var x = io_x;
	var y = io_y;
	var z = asm {
		%load 2 r0;
		%load 1 r1;
		%keyhex r0 r1 r13;
	};
	io_x = io_x + 4;
	z;
}

def io_endl() {
	io_x = 53;
	io_normalize(0);
}
